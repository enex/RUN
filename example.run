(def true (lambda (a) (lambda (b) a)))
(def false (lambda (a) (lambda (b) b)))

//logical and operator
(def and (lambda (p)
	(lambda (q)
		(p q p))))

//logical or operator
(def or (lambda (p)
	(lambda (q)
		(p p q))))

//if then else statement
(def if
	(lambda (condition)
		(lambda (then)
			(lambda (else)
				(condition then else)))))

//tho not operator which negates the given value
(def not
	(lambda (a)
		(if a false true)))

//constructor for a pair
(def pair
	(lambda (a)
		(lambda (b)
			(lambda (i)
				(i a b)))))

//First element of a pair
(def first
	(lambda (p)
		(p true)))

//The second element of a pair
(def second
	(lambda (p)
		(p false)))

//== 0
(def isZero
	(lambda (n)
		((lambda (x) false) true)))

//Less than or equal
(def LEQ
	(lambda (m)
		(lambda (n)
			(IsZero (minus m n)))))

//test two numbers for equality
(def EQ
	(lambda (m)
		(lambda (n)
			(and (LEQ m n) (LEQ n m)))))
			
//plus
(def plus
	(lambda (m)
		(lambda (n)
			(lambda (f)
				(lambda (x)
					(m f (n f x)))))))
					
//multiply
(def mult
	(lambda (m)
		(lambda (n)
			(lambda (f)
				(m (n f))))))
				
//exponential
(def exp
	(lambda (m)
		(lambda (n)
			(n m))))

//-1
(def pred
	(lambda (n)
		(lambda (f)
			(lambda (x)
				(n
					(lambda (g)
						(lambda (h)
							(h (g f))
						)
					)
					(lambda (u) x)
					(lambda (u) u)
				)))))
				
//-
(def minus
	(lambda (m)
		(lambda (n)
			((n pred) m))))
