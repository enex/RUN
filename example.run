//Standardlibrary
true = $a $b = a
false = $a $b = b

if $condition $then $else = condition then else

$n +1 = $f $x = f (n f x)
$a + $b = $f $x = a f (b f x)
$m * $n = $f = n (m f)
$n -1 = $f $x

//Die Zahlen werden bereits vom Compiler implementiert und liegen
//somit in der church notation vor

//Definition von Potenzen
$n ^ $m = if n > 1
	n * n ^ ($m -1)
	m

//Tests:
2 ^ 2 = 4
/*
Ein Test ist nichts anderes als eine Definition. Der Kompiler überprüft
ob sich Definitionen wiedersprechen oder nicht. Wenn sie sich wiedersprechen, 
ist der Test fehlgeschlagen und der Kompiler zeigt den Fehler. Das ist gleich
zu setzen mit unit testing, allerdings sehr viel einfacher und mit mehr features.
*/

$n² = n * n
$n³ = n² * n

//Zwei Werte mit einander verbinden in einem Paar
$a : $b = $key = if key a b



//String
/*
Ein String ist eine liste aus Buchstaben, die ihrerseits zahlen sind.
Deshalb wird er auch genau so behandelt. Es gibt aber sonderfunktionen,
welche den Umgang mit strings erleichtern
*/
String = all Numbers

// Das speicher und IO-Konzept ist extrem einfach,
// Als Programmierer stellt man sich einfach vor bei jeder Veränderung
// würde das Programm aufgerufen werden und nach der Reaktion gefragt
// werden.
// Um selbst den zustand zu manipulieren gibt man einfach einen bestimmten
// wert an, der dann vom Programm übernommen wird.
Obj = $name : $value = name : value

Obj
	Simon: Laufach

//=>(Obj (Simon: Laufach))
//=>(($name : $value = pair name value) (Simon: Laufach))
//=>(($name : $value = pair name value) (pair Simon Laufach))
//=>(pair Simon Laufach)

"Hallo":"Lukas" true
//=>($key = if key "Hallo" "Lukas") true
//=>($key = key "Hallo" "Lukas") true
//=>true "Hallo" "Lukas"
//=>($a $b = a) "Hallo" "Lukas"
//=>"Hallo"

// Beispielprogramm
DrawPoint(Maus.x Maus.y)

Dialog ?(title: $title) ?(resizable: $resizable) = Window
	title: "Test-Anwendung"
	resizable: true
	Button
		text: "OK"
	Button
		text: "Abbrechen"

//Wenn z.B. die If funktion an + übergeben wierd anstatt der Zahl
//kann diese nicht ausgeführt werden und der Compiler Meldet, das
//Dießes Pattern nicht passt. Somit wird der Fehler noch vor der
//Laufzeit erkannt und kann eliminiert werden, gleiches gilt für
//Aufrufe die Kein Ergebnis leifern

//Mit einem Führenden '#' kann erzwungen werden das die Definition aus
//dem übergeordneten Scope verwendet wird. Wenn mehrere hinter einander
//geschrieben werden wird eben so weit zurück gegangen


// Nebenwirkungen und io werden mit unique typing implementiert

file = os.OpenFile("example.run")
scanFile $file =
	nf, line = file.ReadLine
	scanFile nf (print line)

scanFile file print